@page "/SignUp"
@inject IController controller
@inject IModel model
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager

<div class="box">

    <div class="container left">
        <div class="text">
            <h2 class="text-background">Hello, please enter your Data:</h2>
        </div>

        <div class="text">
            <p style="font-size: 30px; margin-top:10px;"> Name</p>
        </div>
        <RadzenTextBox Change=@(args => Name(args)) class="text-iput" Style="width: 40%; margin-top: 0px" />


        <div class="text">
            <p style="font-size: 30px; margin-top:10px"> Surname</p>
        </div>
        <RadzenTextBox Change=@(args => Surname(args)) class="text-iput" Style="width: 40%; margin-top: 0px" />

        <div class="text">
            <p style="font-size: 30px; margin-top:10px"> Phone Number</p>
        </div>
        <RadzenTextBox Change=@(args => phoneNumber(args)) class="text-iput" Style="width: 40%; margin-top: 0px" />

        <div class="text">
            <p style="font-size: 30px; margin-top:10px"> idCardNumber</p>
        </div>
        <RadzenTextBox Change=@(args => idCardNumber(args)) class="text-iput" Style="width: 40%; margin-top: 0px" />

        <RadzenButton Disabled="false" IsBusy=@IsLoading Text="SignUp" class="btn1" Click="Register" />

        <RadzenButton Disabled="false" Text="Back" class="btn1" Style="font-size: 20px !important; padding: 10px 30px !important" Click="Back" />


    </div>

    <div class="container right">
        <img class="image" src="/20618.jpg" alt="Your Image">
    </div>

</div>



@code {

    private bool IsLoading { get; set; }

    private void Back()
    {
        NavigationManager.NavigateTo("/");
    }

    private void Name(string name)
    {
        model.NewClient.name = name;
    }

    private void Surname(string surname)
    {
        model.NewClient.surname = surname;
    }

    private void phoneNumber(string phoneNumber)
    {
        model.NewClient.phoneNumber = phoneNumber;
    }

    private void idCardNumber(string idCardNumber)
    {
        model.NewClient.idCardNumber = idCardNumber;
    }

    public async void Register()
    {
        IsLoading = true;
        await controller.RegisterNewClientAsync();
        await SaveData();
        model.LoggedClient = new ExtendedClientDto();
        await controller.ShowPersonalDataAsync();
        IsLoading = false;
        StateHasChanged();
        NavigationManager.NavigateTo("/Home");
    }

    protected override async Task OnInitializedAsync()
    {
        model.IdCardNumber = null;
        model.NewClient = new ExtendedClientDto();
    }

    private async Task SaveData()
    {
        await SaveDataToLocalStorage(model.NewClient.idCardNumber);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SaveData();
            StateHasChanged();
        }
    }

    private async Task SaveDataToLocalStorage(string data)
    {
        await jsRuntime.InvokeVoidAsync("sessionStorage.setItem", "idCardNumber", data);
    }
}
