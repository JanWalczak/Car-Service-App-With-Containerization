@page "/bodyparts"
@inject IController controller
@inject IModel model


<div class="display">
    <h2 class="text-background" style="padding: 30px 50px; width: auto; margin-left: 20%; margin-right: 20%; font-size: 30px">Body Parts</h2>
</div>


<div class="column2 left" style="align-items: center; justify-content: center; align-content: center; margin-top: 15%">
    <div class="display" style="align-items: center; justify-content: center; align-content: center; margin-top: 15%">

        @if (IsLoading)
        {
            <div style="flex-grow: 1; display: flex; flex-direction: column; justify-content: center; margin-left: 35%">
                <div class="lds-spinner"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
            </div>
        }

        else
        {
            @if (model.BodyPartList.Count != 0)
            {
                @foreach (ExtendedBodyPartDto bodyPartDto in model.BodyPartList)
                {
                    <div class="display2">
                        <button class="btn4" @onclick="() => SelectBodyPart(bodyPartDto)">
                            Id: @bodyPartDto.id, Body type: @bodyPartDto.bodyType,
                            Material: @bodyPartDto.material, Price @bodyPartDto.price, Colour: @bodyPartDto.colour
                        </button>
                    </div>
                }
            }
        }
    </div>
</div>


<div class="column2 right" style="align-items: center; justify-content: center; align-content: center; margin-top: 15%; margin-right:7%">

    <div class="display" style="align-items: center; justify-content: center; align-content: center; ">

        <div class="display2">
            <h4><b>Enter searched material:</b></h4>
            <input name="material" class="text-iput" @bind="@model.Material" style="width: 200px; font-size: 20px; margin-top: 5px" />
        </div>

        <div class="display2">
            @if (model.Material != null)
            {
                <RadzenButton Disabled="false" class="btn5" Text="Search by material" Click="@controller.FindBodyPartByMaterialAsync" />
            }
            @if (model.Material == null)
            {
                <RadzenButton Disabled="true" class="btn5" Text="Search by material" />
            }
        </div>


        <div class="display2" style="margin-top: 40px">
            <h4><b>Enter searched body type:</b></h4>
            <input name="bodyType" class="text-iput" @bind="@model.BodyType" style="width: 200px; font-size: 20px; margin-top: 5px" />
        </div>

        <div class="display2">
            @if (model.BodyType != null)
            {
                <RadzenButton Disabled="false" class="btn5" Text="Search by body type" Click="@controller.FindBodyPartByBodyTypeAsync" />
            }
            @if (model.BodyType == null)
            {
                <RadzenButton Disabled="true" class="btn5" Text="Search by body type" />
            }
        </div>

        <div class="display2" style="margin-top: 40px">
            <RadzenButton Disabled="false" class="btn5" Text="Reload Body Parts" Click="@controller.LoadAllBodyPartsAsync" />
        </div>


        <div class="display2">
            @if (model.SelectedBodyPart == null)
            {
                <RadzenButton Disabled="true" class="btn5" Text="Use Car Part" />
            }
            @if (model.SelectedBodyPart != null)
            {
                <RadzenButton Disabled="false" class="btn5" Text="Use Car Part" Click="@controller.UseCarPartAsync" />
            }
        </div>
    </div>
</div>


@code {
    public async void SelectBodyPart(ExtendedBodyPartDto bodyPartDto)
    {
        model.SelectedBodyPart = bodyPartDto;
    }

    protected override async Task OnInitializedAsync()
    {
        model.Material = null;
        model.BodyType = null;
        IsLoading = true;
    }

    private bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await controller.LoadAllBodyPartsAsync();
            IsLoading = false;
            StateHasChanged();
        }
    }
}